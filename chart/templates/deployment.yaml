{{- if not .Values.application.initializeCommand -}}
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "trackableappname" . }}
  annotations:
    {{ if .Values.gitlab.app }}app.gitlab.com/app: {{ .Values.gitlab.app | quote }}{{ end }}
    {{ if .Values.gitlab.env }}app.gitlab.com/env: {{ .Values.gitlab.env | quote }}{{ end }}
  labels:
    app: {{ template "appname" . }}
    track: "{{ .Values.application.track }}"
    tier: "{{ .Values.application.tier }}"
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  template:
    metadata:
      annotations:
        checksum/application-secrets: "{{ .Values.application.secretChecksum }}"
        {{ if .Values.gitlab.app }}app.gitlab.com/app: {{ .Values.gitlab.app | quote }}{{ end }}
        {{ if .Values.gitlab.env }}app.gitlab.com/env: {{ .Values.gitlab.env | quote }}{{ end }}
{{- if .Values.podAnnotations }}
{{ toYaml .Values.podAnnotations | indent 8 }}
{{- end }}
      labels:
        app: {{ template "appname" . }}
        track: "{{ .Values.application.track }}"
        tier: "{{ .Values.application.tier }}"
        release: {{ .Release.Name }}
    spec:
      imagePullSecrets:
{{ toYaml .Values.image.secrets | indent 10 }}
      volumes:
        # https://medium.com/flant-com/stateful-app-files-in-kubernetes-d015311e5e6b
        - name: assets
          emptyDir: {}
        # Create the shared files volume to be used in both pods (nginx + php-fpm)
        - name: shared-files
          emptyDir: {}
        # Add the nginx/yii2 ConfigMap as a volume for the nginx pod
        - name: nginx-config-volume
          configMap:
            name: {{ template "trackableappname" . }}-nginx-config
      containers:
      # App (php-fpm)
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        {{- if .Values.application.secretName }}
        # Set the app env with all the GitLab variables named K8S_SECRET_*
        envFrom:
        - secretRef:
            name: {{ .Values.application.secretName }}
        {{- end }}
        env:
        # $(<existing env>), keys set by envFrom, from the app secret
        - name: MYSQL_HOST
          value: {{ .Values.application.mysqlHost | quote }}
        - name: MYSQL_USER
          value: {{ .Values.mysql.mysqlUser | quote }}
        - name: MYSQL_PASSWORD
          value: {{ .Values.mysql.mysqlPassword | quote }}
        - name: MYSQL_DB
          value: {{ .Values.mysql.mysqlDatabase | quote }}
        - name: REDIS_HOST
          value: {{ .Values.application.redisHost | quote }}
        - name: REDIS_PASSWORD
          value: {{ .Values.redis.password | quote }}
        - name: GITLAB_ENVIRONMENT_NAME
          value: {{ .Values.gitlab.envName }}
        - name: GITLAB_ENVIRONMENT_URL
          value: {{ .Values.gitlab.envURL }}
        volumeMounts:
        - name: assets
          mountPath: /app/web/assets
        - name: shared-files
          mountPath: /var/www/html
        # Share the app web files to be served by nginx
        lifecycle:
          postStart:
            exec:
              command: ["/bin/sh", "-c", "cp -r /app/web/ /var/www/html/"]
        resources:
{{ toYaml .Values.resources | indent 12 }}
      - name: {{ .Chart.Name }}-nginx
        image: "{{ .Values.image.repository }}:nginx"
        volumeMounts:
        - name: assets
          mountPath: /var/www/assets
        - name: shared-files
          mountPath: /var/www/html
        - name: nginx-config-volume
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        ports:
        - name: "{{ .Values.service.name }}"
          containerPort: {{ .Values.service.internalPort }}
        - name: "nchan"
          containerPort: 9090
        livenessProbe:
{{- if eq .Values.livenessProbe.probeType "httpGet" }}
          httpGet:
            path: {{ .Values.livenessProbe.path }}
            scheme: {{ .Values.livenessProbe.scheme }}
            port: {{ .Values.service.internalPort }}
{{- else if eq .Values.livenessProbe.probeType "tcpSocket" }}
          tcpSocket:
            port: {{ .Values.service.internalPort }}
{{- end }}
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
        readinessProbe:
{{- if eq .Values.readinessProbe.probeType "httpGet" }}
          httpGet:
            path: {{ .Values.readinessProbe.path }}
            scheme: {{ .Values.readinessProbe.scheme }}
            port: {{ .Values.service.internalPort }}
{{- else if eq .Values.readinessProbe.probeType "tcpSocket" }}
          tcpSocket:
            port: {{ .Values.service.internalPort }}
{{- end }}
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
{{- end -}}
